<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TelegramController extends Controller
{
    protected string $telegram_api_url = "https://api.telegram.org/bot";
    protected string $telegram_token;
    protected string $url;

    public function __construct()
    {
        $this->telegram_token = env('TELEGRAM_BOT_TOKEN');
        $this->url = $this->telegram_api_url . $this->telegram_token;
    }

    public function handle(Request $request)
    {
        $update = $request->all();

        if (isset($update['message'])) {
            $this->processMessage($update['message']);
        } elseif (isset($update['callback_query'])) {
            $this->processCallbackQuery($update['callback_query']);
        }

        return response()->json(['status' => 'ok']);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    private function processMessage($message)
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';

        // –î–∞–ª–µ–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä /start
        if ($text === '/start') {
            $this->sendMenu($chatId); // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        } else {
            $this->sendMessage($chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.");
        }
    }

    private function sendMenu($chatId)
    {
        $url = $this->url . "/sendMessage";

        $text = "‚≠ê –Ø —É–º–µ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö Wildberries –∏ Ozon.\n\n" .
            "üü™ –ù–∞ Wildberries —è —É–º–µ—é –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–ª–æ—Ç—ã —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏—ë–º–∫–æ–π. –ò–ª–∏ —Å –ø–ª–∞—Ç–Ω–æ–π, –¥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞–º –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞.\n\n" .
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.";

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => '–ù–∞—á–∞—Ç—å', 'callback_data' => 'start_search'],
                    ['text' => '–ú–æ–∏ –ø–æ–∏—Å–∫–∏', 'callback_data' => 'my_searches'],
                    ['text' => '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data' => 'statistics']
                ]
            ]
        ];

        Log::info('ID:'.$chatId);

        Http::post($url, [
            'chat_id' => $chatId,
            'text' => $text,
            'reply_markup' => json_encode($keyboard),
            'parse_mode' => 'Markdown'
        ]);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    private function sendMessage($chatId, $text)
    {
        $url = $this->url . "/sendMessage";

        Http::post($url, [
            'chat_id' => $chatId,
            'text' => $text
        ]);
    }

    private function processCallbackQuery($query)
    {
        $chatId = $query['message']['chat']['id'];
        Log::info("ChatID: ".$chatId);
        // –î–µ–ª–∞–µ–º —Å–µ–Ω–¥ –º–µ—Å—Å–µ–¥–∂ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ —Ç–∞–º
    }
}
